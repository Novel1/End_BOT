import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    JobQueue
)
import tempfile
import requests
from telegram import ReplyKeyboardRemove
import random
from datetime import datetime, timedelta
import csv
import io
import os
import requests
from io import BytesIO
from pathlib import Path
import time
import telegram
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
CHOOSING, TYPING_WISH, TYPING_SOUL, HOLIDAY_NAME, HOLIDAY_STYLE = range(5)
ADMIN_ID = int(os.getenv('1291710833', 1291710833))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
BASE_DIR = Path(__file__).parent
IMAGE_DIR = BASE_DIR / "images"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
if not IMAGE_DIR.exists():
    IMAGE_DIR.mkdir()
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMAGE_DIR}")

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_MAPPING = {
    "adventure_time": "images.jpeg",
    "something_new": "Soos.jpeg",
    "breakfast": "What.jpg",
    "snacks_drink": "cat.jpeg",
    "snacks_food": "Screenshot_1.png",
    "snacks_order": "Screenshot_2.png",
    "spells_menu": "Screenshot_3.png",
    "shock": "123.jpeg",
    "games": "3f2f47274f1001136417a49ae8bcc861.jpg",
    "custom_wish": "Screenshot_5.png",
    "flirt": "676474b166a2e356a4e29586d73d6d79.jpg",
    "secret": "MV5BMTQ3MTg3MzY4OV5BMl5BanBnXkFtZTgwNTI4MzM1NzE@._V1_FMjpg_UX1000_.jpg",
    "about": "35fdde57ed2e6dd72bd1e6adca6fc501.jpg",
    "settings": "Screenshot_4.png",
}

# –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_cache = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫—ç—à (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
def load_images_to_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫—ç—à...")
    for key, filename in IMAGE_MAPPING.items():
        image_path = IMAGE_DIR / filename
        if image_path.exists():
            try:
                with open(image_path, 'rb') as f:
                    # –°–æ–∑–¥–∞–µ–º BytesIO –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
                    bio = BytesIO(f.read())
                    bio.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    image_cache[key] = bio
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫—ç—à: {filename}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
                image_cache[key] = None
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            image_cache[key] = None

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES = {
    'adventure': "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å? –í—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –£–∂–µ –≤ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ–≤–æ—Ä–æ—Ç–∞–º. üéí‚ú®",
    'something_new': "–ë—É–¥—å –≥–æ—Ç–æ–≤–∞ –∏—Å–ø—ã—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!",
    'breakfast': "–û–∂–∏–¥–∞–π —Å—é—Ä–ø—Ä–∏–∑-–∑–∞–≤—Ç—Ä–∞–∫ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!",
    'snacks': {
        'drink': "–ñ–¥–∏, —è —É–∂–µ –≤ –ø—É—Ç–∏",
        'food': "–ñ–¥–∏, —è —É–∂–µ –≤ –ø—É—Ç–∏",
        'order': "–ù–∞–ø–∏—à–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–æ!"
    },
    'spells': {
        1: "–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑ –≤ —Å–∞–º–æ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ‚Ä¶ –¥–∞–∂–µ –≤ —á–∞–π–Ω–∏–∫–µ. –ù–µ —à—É—Ç–∏ —Å –º–∞–≥–∏–µ–π!",
        2: "–ö—Ç–æ-—Ç–æ —É–∂–µ —à–ª—ë—Ç —Ç–µ–±–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏. –ü–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ø–ª–æ ‚Äî —ç—Ç–æ –º–∞–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        3: "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–ª—É—á–∏—à—å —á—Ç–æ-—Ç–æ —Å–ª–∞–¥–∫–æ–µ‚Ä¶ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ü–µ–ª—É–π —Å –ø—Ä–∏–≤–∫—É—Å–æ–º –∫–∞—Ä–∞–º–µ–ª–∏.",
        4: "–ü—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶ –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —É–∂–µ –ª–µ—Ç–∏—Ç –≤–æ–ª—à–µ–±–Ω–∞—è –≤–µ—Å—Ç–æ—á–∫–∞ —Å –ª—é–±–æ–≤—å—é.",
        5: "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≥—Ä—É—Å—Ç–Ω–æ ‚Äî –Ω–µ –±–æ–π—Å—è. –í—Å–µ–ª–µ–Ω–Ω–∞—è —É–∂–µ —à–ª—ë—Ç —Ç–µ–±–µ –ø–ª—é—à–µ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
        6: "–í —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –º—è–≥–∫–æ—Å—Ç–∏, —É—é—Ç–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ª—à–µ–±–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.",
        7: "–¢–≤–æ—ë –≥–ª–∞–≤–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —É–ª—ã–±–Ω—É—Ç—å—Å—è –∏ –∂–¥–∞—Ç—å —á—É–¥–∞.",
        8: "–¢—Å—Å‚Ä¶ —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ –∂–¥—ë—Ç. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ."
    },
    'shock': lambda: f"{random.randint(1, 100)}",
    'games': "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
    'flirt': "–ì–æ—Ç–æ–≤—å—Å—è –∫ –≤–µ—Å—ë–ª—ã–º –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º. –õ–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç –≤–∫–ª—é—á—ë–Ω!",
    'secret': "–¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ –∫–≤–µ—Å—Ç. –ñ–¥–∏ –ø–µ—Ä–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é...",
    'soul': "–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ –¥—É—à–∞–º. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç",
    'about': "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å—á–∞—Å—Ç—å—è üíò–ò, –∫—Å—Ç–∞—Ç–∏... —è ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–∞—à—É –≥–æ–¥–æ–≤—â–∏–Ω—É üéÅ‚ù§Ô∏è",
    'settings': "–†–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ, –ø–æ–∫–∞ –∂–¥–µ–º"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    ["üò± –£–¥–∏–≤–∏ –º–µ–Ω—è", "‚ûï –í—Ä–µ–º—è –¥–ª—è –≤–∫—É—Å–Ω—è—à–µ–∫"],
    ["üìú –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è", "üé≤ –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç"],
    ["üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", "ü™Ñ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ"],
    ["üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã", "üíÉ –§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º"],
    ["üíå –°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "üß† –î–ª—è –¥—É—à–∏"],
    ["‚öôÔ∏è –û –Ω–∞—Å / –ü–æ–º–æ—â—å"]
]

# –ú–µ–Ω—é "–£–¥–∏–≤–∏ –º–µ–Ω—è"
SURPRISE_KEYBOARD = [
    ["Adventure Time", "–ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ú–µ–Ω—é –≤–∫—É—Å–Ω—è—à–µ–∫
SNACKS_KEYBOARD = [
    ["üç≥ –•–æ—á—É –∑–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å"],
    ["üéÅ –ü—Ä–∏–Ω–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–ü—Ä–∏–Ω–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å"
SNACKS_SUB_KEYBOARD = [
    ["üçπ –ü–æ–ø–∏—Ç—å", "üçî –ü–æ–∫—É—à–∞—Ç—å"],
    ["üìù –ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ú–µ–Ω—é —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
SPELLS_KEYBOARD = [
    ["1. –ë–∏–±–±–∏–¥–∏-–ë–æ–±–±–∏–¥–∏-–ë—É"],
    ["2. –ê–º—É—Ä—É—Å –ò–Ω–≤–∏–∑–∏—É–º üíò"],
    ["3. –°–ª–∞–¥—É—Å –ö–æ–Ω—Ñ–µ—Ç—É—Å üç¨"],
    ["4. –õ–∞–≤–∏—É—Å –ú–∞–∫—Å–∏–º—É—Å üíå"],
    ["5. –§–ª–∞—Ñ—Ñ–∏ –£—Ç–µ—à–∏—É–º üß∏"],
    ["6. –ö–∏—Å-–∫–∏—Å –°–∏–º-–°–∞–ª–∞–±–∏–º üòΩ"],
    ["7. –£–ª—å—Ç–∏–º–∞ –ö—É–¥–µ—Å–∏—è üîÆ"],
    ["8. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ #16 ‚Äî –ù–µ–ª—å–∑—è –Ω–∞–∑—ã–≤–∞—Ç—å –≤—Å–ª—É—Ö üïØÔ∏è"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ú–µ–Ω—é "–û –Ω–∞—Å"
ABOUT_KEYBOARD = [
    ["ü§ñ –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ"],
    ["üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
ADMIN_KEYBOARD = [
    ["üëÅÔ∏è –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
    ["üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
users_wishes = {}
activity_log = []
user_requests = []
notification_enabled = True
last_surprise_date = {}


async def send_image(update: Update, image_key: str, caption: str, reply_markup=None):
    try:
        if image_key not in image_cache:
            await update.message.reply_text(caption, reply_markup=reply_markup)
            return

        image_bio = image_cache.get(image_key)

        if image_bio:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Ç–æ–∫–∞
            image_bio.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ BytesIO
            await update.message.reply_photo(
                photo=image_bio,
                caption=caption,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(caption, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_key}: {e}")
        await update.message.reply_text(caption, reply_markup=reply_markup)


def log_activity(user_id: int, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = f"{timestamp} - {user_id} - {action}"
    activity_log.append(entry)
    logger.info(entry)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await show_main_menu(update, "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! üíì\n–í—ã–±–∏—Ä–∞–π, —á–µ–≥–æ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è:")


async def show_main_menu(update: Update, text: str):
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(
            MAIN_KEYBOARD,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
async def surprise_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é '–£–¥–∏–≤–∏ –º–µ–Ω—è'")
    await update.message.reply_text(
        "–í—ã–±–∏—Ä–∞–π –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(SURPRISE_KEYBOARD, resize_keyboard=True)
    )


async def adventure_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "Adventure Time")
    await send_image(update, "adventure_time", RESPONSES['adventure'])


async def something_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ")
    await send_image(update, "something_new", RESPONSES['something_new'])


async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å")
    await send_image(update, "breakfast", RESPONSES['breakfast'])


async def snacks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é –≤–∫—É—Å–Ω—è—à–µ–∫")
    await update.message.reply_text(
        "–í—ã–±–∏—Ä–∞–π:",
        reply_markup=ReplyKeyboardMarkup(SNACKS_KEYBOARD, resize_keyboard=True)
    )


async def bring_something_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü—Ä–∏–Ω–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å")
    await update.message.reply_text(
        "–ß—Ç–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏?",
        reply_markup=ReplyKeyboardMarkup(SNACKS_SUB_KEYBOARD, resize_keyboard=True)
    )


async def snacks_drink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ–ø–∏—Ç—å")
    await send_image(update, "snacks_drink", RESPONSES['snacks']['drink'])
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")


async def snacks_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ–∫—É—à–∞—Ç—å")
    await send_image(update, "snacks_food", RESPONSES['snacks']['food'])
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")


async def snacks_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å")
    await send_image(update, "snacks_order", RESPONSES['snacks']['order'], reply_markup=ReplyKeyboardRemove())
    return TYPING_WISH


async def spells_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π")
    await send_image(update, "spells_menu", "–ü—Ä–æ—á–∏—Ç–∞–π –≤—Å–ª—É—Ö –æ–¥–Ω–æ –∏–∑ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ",
                     reply_markup=ReplyKeyboardMarkup(SPELLS_KEYBOARD, resize_keyboard=True))


async def handle_spell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    spell_text = update.message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    spell_map = {
        "1. –ë–∏–±–±–∏–¥–∏-–ë–æ–±–±–∏–¥–∏-–ë—É": 1,
        "2. –ê–º—É—Ä—É—Å –ò–Ω–≤–∏–∑–∏—É–º üíò": 2,
        "3. –°–ª–∞–¥—É—Å –ö–æ–Ω—Ñ–µ—Ç—É—Å üç¨": 3,
        "4. –õ–∞–≤–∏—É—Å –ú–∞–∫—Å–∏–º—É—Å üíå": 4,
        "5. –§–ª–∞—Ñ—Ñ–∏ –£—Ç–µ—à–∏—É–º üß∏": 5,
        "6. –ö–∏—Å-–∫–∏—Å –°–∏–º-–°–∞–ª–∞–±–∏–º üòΩ": 6,
        "7. –£–ª—å—Ç–∏–º–∞ –ö—É–¥–µ—Å–∏—è üîÆ": 7,
        "8. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ #16 ‚Äî –ù–µ–ª—å–∑—è –Ω–∞–∑—ã–≤–∞—Ç—å –≤—Å–ª—É—Ö üïØÔ∏è": 8
    }

    spell_num = spell_map.get(spell_text)
    if spell_num:
        log_activity(user.id, f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ #{spell_num}")
        await update.message.reply_text(RESPONSES['spells'][spell_num])
    else:
        await update.message.reply_text("–ú–∞–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ‚ú®")

    await spells_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π


async def shock_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç")
    number = RESPONSES['shock']()
    await send_image(update, "shock", f"–í–∞—à–µ —á–∏—Å–ª–æ: {number}")


async def games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–∏–Ω–∏-–∏–≥—Ä—ã")
    await send_image(update, "games", RESPONSES['games'])


async def flirt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º")
    await send_image(update, "flirt", RESPONSES['flirt'])


async def secret_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
    await send_image(update, "secret", RESPONSES['secret'])


async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ò–Ω—Ñ–æ –æ –±–æ—Ç–µ")
    await send_image(update, "about", RESPONSES['about'])


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    await send_image(update, "settings", RESPONSES['settings'])


# --- –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π ---
async def custom_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ")
    await send_image(update, "custom_wish", "–ù–∞–ø–∏—à–∏, —á–µ–≥–æ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è ‚Äî –∏ —è —ç—Ç–æ —Ä–µ–∞–ª–∏–∑—É—é!",
                     reply_markup=ReplyKeyboardRemove())
    return TYPING_WISH


async def save_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    wish_text = update.message.text
    timestamp = datetime.now()
    user_requests.append((user.id, user.first_name, wish_text, timestamp))
    log_activity(user.id, f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish_text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_enabled:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üéâ –ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç {user.first_name}!\n\n"
                     f"üí¨ –¢–µ–∫—Å—Ç: {wish_text}\n"
                     f"üïí –í—Ä–µ–º—è: {timestamp.strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! –°–∫–æ—Ä–æ —ç—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ ‚ú®")
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return ConversationHandler.END


# --- –î–∏–∞–ª–æ–≥ "–ü–æ –¥—É—à–∞–º" ---
async def soul_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ –¥—É—à–∞–º")
    await update.message.reply_text(RESPONSES['soul'], reply_markup=ReplyKeyboardRemove())
    return TYPING_SOUL


async def save_soul_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    topic = update.message.text
    timestamp = datetime.now()
    user_requests.append((user.id, user.first_name, f"–¢–µ–º–∞ –ø–æ –¥—É—à–∞–º: {topic}", timestamp))
    log_activity(user.id, f"–¢–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {topic}")
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º üåô")
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return ConversationHandler.END


# --- –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã ---
async def holiday_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())
    return HOLIDAY_NAME


async def holiday_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['holiday_name'] = update.message.text
    keyboard = [["üé¨ –í —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–∞", "üè† –£—é—Ç–Ω–æ"], ["üòÇ –®—É—Ç–ª–∏–≤–æ"], ["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return HOLIDAY_STYLE


async def holiday_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    style = update.message.text
    name = context.user_data.get("holiday_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    log_activity(user.id, f"–ü—Ä–∞–∑–¥–Ω–∏–∫: {name}, –°—Ç–∏–ª—å: {style}")
    await show_main_menu(update, f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–∑–¥–Ω–∏–∫ ¬´{name}¬ª –≤ —Å—Ç–∏–ª–µ ¬´{style}¬ª –∑–∞–ø–∏—Å–∞–Ω!")
    return ConversationHandler.END


# --- –ú–µ–Ω—é "–û –Ω–∞—Å" ---
async def about_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é '–û –Ω–∞—Å'")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=ReplyKeyboardMarkup(ABOUT_KEYBOARD, resize_keyboard=True)
    )


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id == ADMIN_ID:
        log_activity(user.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await update.message.reply_text(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=ReplyKeyboardMarkup(ADMIN_KEYBOARD, resize_keyboard=True)
        )
        return CHOOSING
    await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    return ConversationHandler.END


# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def export_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π")
    if not user_requests:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç")
        return

    # –°–æ–∑–¥–∞–µ–º CSV
    csv_data = io.StringIO()
    writer = csv.writer(csv_data)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(["–ò–º—è", "–ü–æ–∂–µ–ª–∞–Ω–∏–µ", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"])

    for username, wish, timestamp in user_requests:
        writer.writerow([
            username,
            wish,
            timestamp.strftime("%Y-%m-%d %H:%M")
        ])

    csv_data.seek(0)
    await update.message.reply_document(
        document=io.BytesIO(csv_data.getvalue().encode()),
        filename="romantic_wishes.csv",
        caption="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π üåü"
    )


async def show_activity_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    if not activity_log:
        await update.message.reply_text("–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç—ã")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    log_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n" + "\n".join(activity_log[-20:])
    await update.message.reply_text(log_text)


async def admin_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    global notification_enabled
    notification_enabled = not notification_enabled
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if notification_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    log_activity(user.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
    await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö —Ç–µ–ø–µ—Ä—å {status} üîî")


async def admin_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª–∏ —Å—é—Ä–ø—Ä–∏–∑—ã
    reminder_text = "üéØ –°—Ç–∞—Ç—É—Å —Å—é—Ä–ø—Ä–∏–∑–æ–≤:\n\n"
    now = datetime.now()

    if not last_surprise_date:
        reminder_text += "–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å—é—Ä–ø—Ä–∏–∑–æ–≤ üò¢"
    else:
        for user_id, last_date in last_surprise_date.items():
            days_passed = (now - last_date).days
            reminder_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: "

            if days_passed > 7:
                reminder_text += f"‚ùå –û—á–µ–Ω—å –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å—é—Ä–ø—Ä–∏–∑–∞ ({days_passed} –¥–Ω–µ–π)"
            elif days_passed > 3:
                reminder_text += f"‚ö†Ô∏è –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å—é—Ä–ø—Ä–∏–∑–∞ ({days_passed} –¥–Ω–µ–π)"
            else:
                reminder_text += f"‚úÖ –ù–µ–¥–∞–≤–Ω–æ –±—ã–ª —Å—é—Ä–ø—Ä–∏–∑ ({days_passed} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"

            reminder_text += "\n"

    reminder_text += "\nüí° –°–æ–≤–µ—Ç: —Å–¥–µ–ª–∞–π—Ç–µ —Å—é—Ä–ø—Ä–∏–∑ —Å–µ–≥–æ–¥–Ω—è!"
    await update.message.reply_text(reminder_text)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üíì")
    return ConversationHandler.END


# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminders(context: CallbackContext):
    job = context.job
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑
    for user_id, last_date in last_surprise_date.items():
        days_passed = (now - last_date).days

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π
        if days_passed >= 3:
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üíå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                         f"–í—ã –¥–∞–≤–Ω–æ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å—é—Ä–ø—Ä–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.\n"
                         f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑ –±—ã–ª {days_passed} –¥–Ω–µ–π –Ω–∞–∑–∞–¥.\n\n"
                         f"–°–¥–µ–ª–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏—è—Ç–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è! üíñ"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                last_surprise_date[user_id] = now
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def setup_handlers(application):
    # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex(r"^‚öôÔ∏è –û –Ω–∞—Å / –ü–æ–º–æ—â—å$"), about_menu),
            MessageHandler(filters.Regex(r"^‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º$"), admin_panel),
            MessageHandler(filters.Regex(r"^üìù –ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å$"), snacks_order),
            MessageHandler(filters.Regex(r"^ü™Ñ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ$"), custom_wish),
            MessageHandler(filters.Regex(r"^üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã$"), holiday_menu),
            MessageHandler(filters.Regex(r"^üß† –î–ª—è –¥—É—à–∏$"), soul_talk),
        ],
        states={
            TYPING_WISH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_wish),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            TYPING_SOUL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_soul_topic),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            HOLIDAY_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, holiday_name),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            HOLIDAY_STYLE: [
                MessageHandler(filters.Regex(r"^(üé¨ –í —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–∞|üè† –£—é—Ç–Ω–æ|üòÇ –®—É—Ç–ª–∏–≤–æ)$"), holiday_style),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            CHOOSING: [
                MessageHandler(filters.Regex(r"^üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π$"), export_wishes),
                MessageHandler(filters.Regex(r"^üëÅÔ∏è –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏$"), show_activity_log),
                MessageHandler(filters.Regex(r"^üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$"), admin_notifications),
                MessageHandler(filters.Regex(r"^üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), admin_reminders),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(r"^üò± –£–¥–∏–≤–∏ –º–µ–Ω—è$"), surprise_menu))
    application.add_handler(MessageHandler(filters.Regex(r"^‚ûï –í—Ä–µ–º—è –¥–ª—è –≤–∫—É—Å–Ω—è—à–µ–∫$"), snacks_menu))
    application.add_handler(MessageHandler(filters.Regex(r"^üìú –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è$"), spells_menu))
    application.add_handler(MessageHandler(filters.Regex(r"^üé≤ –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç$"), shock_content))
    application.add_handler(MessageHandler(filters.Regex(r"^üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã$"), games))
    application.add_handler(MessageHandler(filters.Regex(r"^üíÉ –§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º$"), flirt_mode))
    application.add_handler(MessageHandler(filters.Regex(r"^üíå –°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å$"), secret_level))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(r"^Adventure Time$"), adventure_time))
    application.add_handler(MessageHandler(filters.Regex(r"^–ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ$"), something_new))
    application.add_handler(MessageHandler(filters.Regex(r"^üç≥ –•–æ—á—É –∑–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å$"), breakfast))
    application.add_handler(MessageHandler(filters.Regex(r"^üéÅ –ü—Ä–∏–Ω–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å$"), bring_something_menu))
    application.add_handler(MessageHandler(filters.Regex(r"^üçπ –ü–æ–ø–∏—Ç—å$"), snacks_drink))
    application.add_handler(MessageHandler(filters.Regex(r"^üçî –ü–æ–∫—É—à–∞—Ç—å$"), snacks_food))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
    spell_patterns = [
        r"^1\. –ë–∏–±–±–∏–¥–∏-–ë–æ–±–±–∏–¥–∏-–ë—É$",
        r"^2\. –ê–º—É—Ä—É—Å –ò–Ω–≤–∏–∑–∏—É–º üíò$",
        r"^3\. –°–ª–∞–¥—É—Å –ö–æ–Ω—Ñ–µ—Ç—É—Å üç¨$",
        r"^4\. –õ–∞–≤–∏—É—Å –ú–∞–∫—Å–∏–º—É—Å üíå$",
        r"^5\. –§–ª–∞—Ñ—Ñ–∏ –£—Ç–µ—à–∏—É–º üß∏$",
        r"^6\. –ö–∏—Å-–∫–∏—Å –°–∏–º-–°–∞–ª–∞–±–∏–º üòΩ$",
        r"^7\. –£–ª—å—Ç–∏–º–∞ –ö—É–¥–µ—Å–∏—è üîÆ$",
        r"^8\. –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ #16 ‚Äî –ù–µ–ª—å–∑—è –Ω–∞–∑—ã–≤–∞—Ç—å –≤—Å–ª—É—Ö üïØÔ∏è$"
    ]
    for pattern in spell_patterns:
        application.add_handler(MessageHandler(filters.Regex(pattern), handle_spell))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é "–û –Ω–∞—Å"
    application.add_handler(MessageHandler(filters.Regex(r"^ü§ñ –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ$"), about_bot))
    application.add_handler(MessageHandler(filters.Regex(r"^üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), settings))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    application.add_handler(MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main))


def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫—ç—à (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    load_images_to_cache()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    for key, filename in IMAGE_MAPPING.items():
        path = IMAGE_DIR / filename
        if not path.exists():
            logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {path}")
        else:
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {path}")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    while True:
        try:
            application = ApplicationBuilder().token("8054818207:AAFq18jcwhO0h1i28mH-H2B_btNIMRyJLqQ").build()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if application.job_queue:
                application.job_queue.run_repeating(
                    send_reminders,
                    interval=timedelta(days=1),
                    first=10
                )
            else:
                logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

            setup_handlers(application)

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            application.run_polling()

        except telegram.error.Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(traceback.format_exc())  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


if __name__ == "__main__":
    main()